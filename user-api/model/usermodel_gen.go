// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"github.com/Masterminds/squirrel"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTodoDbUserIdPrefix       = "cache:todoDb:user:id:"
	cacheTodoDbUserEmailPrefix    = "cache:todoDb:user:email:"
	cacheTodoDbUserUsernamePrefix = "cache:todoDb:user:username:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		FindOneByPhone(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*User, error)
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id       int64          `db:"id"`        // 用户ID
		Username string         `db:"username"`  // 用户名
		Password string         `db:"password"`  // 密码
		Email    sql.NullString `db:"email"`     // 邮箱
		Phone    sql.NullString `db:"phone"`     // 手机号
		CreateAt time.Time      `db:"create_at"` // 创建时间
		UpdateAt time.Time      `db:"update_at"` // 更新时间
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	todoDbUserEmailKey := fmt.Sprintf("%s%v", cacheTodoDbUserEmailPrefix, data.Email)
	todoDbUserIdKey := fmt.Sprintf("%s%v", cacheTodoDbUserIdPrefix, id)
	todoDbUserUsernameKey := fmt.Sprintf("%s%v", cacheTodoDbUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, todoDbUserEmailKey, todoDbUserIdKey, todoDbUserUsernameKey)
	return err
}
func (m *defaultUserModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*User, error) {

	builder = builder.Columns(userRows).From(m.table)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("1 = ?", 1).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*User
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}
func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	todoDbUserIdKey := fmt.Sprintf("%s%v", cacheTodoDbUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, todoDbUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error) {
	todoDbUserEmailKey := fmt.Sprintf("%s%v", cacheTodoDbUserEmailPrefix, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, todoDbUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	todoDbUserUsernameKey := fmt.Sprintf("%s%v", cacheTodoDbUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, todoDbUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUserModel) FindOneByPhone(ctx context.Context, Phone string) (*User, error) {
	todoDbUserUsernameKey := fmt.Sprintf("%s%v", cacheTodoDbUserUsernamePrefix, Phone)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, todoDbUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `Phone` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, Phone); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultUserModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}
func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	todoDbUserEmailKey := fmt.Sprintf("%s%v", cacheTodoDbUserEmailPrefix, data.Email)
	todoDbUserIdKey := fmt.Sprintf("%s%v", cacheTodoDbUserIdPrefix, data.Id)
	todoDbUserUsernameKey := fmt.Sprintf("%s%v", cacheTodoDbUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Email, data.Phone)
	}, todoDbUserEmailKey, todoDbUserIdKey, todoDbUserUsernameKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	todoDbUserEmailKey := fmt.Sprintf("%s%v", cacheTodoDbUserEmailPrefix, data.Email)
	todoDbUserIdKey := fmt.Sprintf("%s%v", cacheTodoDbUserIdPrefix, data.Id)
	todoDbUserUsernameKey := fmt.Sprintf("%s%v", cacheTodoDbUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Email, newData.Phone, newData.Id)
	}, todoDbUserEmailKey, todoDbUserIdKey, todoDbUserUsernameKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTodoDbUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
