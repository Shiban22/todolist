// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	todoFieldNames          = builder.RawFieldNames(&Todo{})
	todoRows                = strings.Join(todoFieldNames, ",")
	todoRowsExpectAutoSet   = strings.Join(stringx.Remove(todoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	todoRowsWithPlaceHolder = strings.Join(stringx.Remove(todoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTodoDbTodoIdPrefix = "cache:todoDb:todo:id:"
)

type (
	todoModel interface {
		Insert(ctx context.Context, data *Todo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Todo, error)
		Update(ctx context.Context, data *Todo) error
		Delete(ctx context.Context, id int64) error
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Todo, error)
	}

	defaultTodoModel struct {
		sqlc.CachedConn
		table string
	}

	Todo struct {
		Id        int64     `db:"id"`
		Title     string    `db:"title"`
		Completed int64     `db:"completed"`
		CreatedAt time.Time `db:"created_at"`
	}
)

func newTodoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTodoModel {
	return &defaultTodoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`todo`",
	}
}

func (m *defaultTodoModel) Delete(ctx context.Context, id int64) error {
	todoDbTodoIdKey := fmt.Sprintf("%s%v", cacheTodoDbTodoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, todoDbTodoIdKey)
	return err
}

func (m *defaultTodoModel) FindOne(ctx context.Context, id int64) (*Todo, error) {
	todoDbTodoIdKey := fmt.Sprintf("%s%v", cacheTodoDbTodoIdPrefix, id)
	var resp Todo
	err := m.QueryRowCtx(ctx, &resp, todoDbTodoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodoModel) Insert(ctx context.Context, data *Todo) (sql.Result, error) {
	todoDbTodoIdKey := fmt.Sprintf("%s%v", cacheTodoDbTodoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, todoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Title, data.Completed)
	}, todoDbTodoIdKey)
	return ret, err
}

func (m *defaultTodoModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Todo, error) {

	builder = builder.Columns(todoRows).From(m.table)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("1 = ?", 1).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Todo
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultTodoModel) Update(ctx context.Context, data *Todo) error {
	todoDbTodoIdKey := fmt.Sprintf("%s%v", cacheTodoDbTodoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, todoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Title, data.Completed, data.Id)
	}, todoDbTodoIdKey)
	return err
}

func (m *defaultTodoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTodoDbTodoIdPrefix, primary)
}

func (m *defaultTodoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTodoModel) tableName() string {
	return m.table
}
